#!/usr/bin/python
from __SHORTNAME__ import Controller
from __SHORTNAME__.daemon import Daemon

import os
import sys
import time
import signal
import logging
import optparse
import traceback

from logging.handlers import SysLogHandler


CONFIGFILE="/etc/__SHORTNAME__/__SHORTNAME__.conf"
CONTROLLER=None

def init_syslog_logging(level=logging.INFO):
    """initialize logging"""
    #logging.basicConfig(level=loglevel)
    logger = logging.getLogger()
    logger.setLevel(level)
    slh=SysLogHandler(address = '/dev/log')
    slh.setFormatter(logging.Formatter("__SHORTNAME__[%(process)d]: %(message)s"))
    #log debug/error messages to syslog info level
    slh.priority_map["DEBUG"]="info"
    slh.priority_map["ERROR"]="info"
    
    slh.setLevel(level)
    logger.addHandler(slh)
    return logger

def reload_config():
    """reload configuration"""
    ## 
    ##TODO: INSERT CODE TO LOAD YOUR CONFIGURATION HERE, eg. :  ## 
    #newconfig=ConfigParser.ConfigParser()
    #newconfig.readfp(open(CONFIGFILE))
    
    #dconfdir=os.path.join(os.path.dirname(CONFIGFILE),'conf.d')
    #if os.path.isdir(dconfdir):
    #    filelist=os.listdir(dconfdir)
    #    configfiles=[dconfdir+'/'+c for c in filelist if c.endswith('.conf')]
    #    readfiles=newconfig.read(configfiles)
    #return newconfig
    
    #we return a dummy dict by default
    return {}


def sighup(signum,frame):
    """handle sighup to reload config"""
    newconfig=reload_config()
    if CONTROLLER!=None:
        CONTROLLER.config=newconfig
    
    CONTROLLER.reload()

def sigterm(signum,frame):
    CONTROLLER.shutdown()

if __name__ == '__main__':

    args=sys.argv
    parser=optparse.OptionParser()
    parser.add_option("-f","--foreground",action="store_true",dest="foreground",default=False,help="do not fork to background")
    parser.add_option("--pidfile",action="store",dest="pidfile")
    parser.add_option("-c","--config",action="store",dest="config",help="configfile",default="/etc/__SHORTNAME__/__SHORTNAME__.conf")
    parser.add_option("--log-config",action="store",dest="logconfig",help="logging configuration file")
    parser.add_option("--user",action="store",dest="user", help="run as user")
    parser.add_option("--group",action="store",dest="group", help="run as group")
    
    (opts,args)=parser.parse_args()
    
    #keep a copy of stderr in case something goes wrong
    stderr=sys.stderr
    try:
        daemon=Daemon(opts.pidfile)
        if not opts.foreground:
            daemon.daemonize()
        CONFIGFILE=opts.config
        config=reload_config()
        
        #drop privileges
        daemon.drop_privileges(opts.user,opts.group)
        
        if opts.logconfig:
            logging.config.fileConfig(opts.loggingconfig)
        
        if opts.foreground:
            #log to console
            if not opts.logconfig:
                logging.basicConfig(level=logging.DEBUG,format='%(asctime)s %(levelname)s %(message)s')
        else:
            #log to syslog
            if not opts.logconfig:
                init_syslog_logging()
            signal.signal(signal.SIGHUP, sighup)
            signal.signal(signal.SIGTERM, sigterm)
        
        logging.info("__LONGNAME__ starting up...")
    
        CONTROLLER=Controller(config)
        CONTROLLER.run()
    
        logging.info("__LONGNAME__ shut down")
    except Exception:
        exc=traceback.format_exc()
        errtext="Unhandled exception in main thread: \n %s \n"%exc
        stderr.write(errtext)
        logging.error(errtext)
        
    
    
    